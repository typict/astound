// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$sprite-blank-name: 'sprite-blank';
$sprite-blank-x: 36px;
$sprite-blank-y: 16px;
$sprite-blank-offset-x: -36px;
$sprite-blank-offset-y: -16px;
$sprite-blank-width: 1px;
$sprite-blank-height: 1px;
$sprite-blank-total-width: 44px;
$sprite-blank-total-height: 40px;
$sprite-blank-image: '../img/gulp_png_sprite.png';
$sprite-blank: (36px, 16px, -36px, -16px, 1px, 1px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-blank', );
$sprite-fb-name: 'sprite-fb';
$sprite-fb-x: 36px;
$sprite-fb-y: 0px;
$sprite-fb-offset-x: -36px;
$sprite-fb-offset-y: 0px;
$sprite-fb-width: 8px;
$sprite-fb-height: 16px;
$sprite-fb-total-width: 44px;
$sprite-fb-total-height: 40px;
$sprite-fb-image: '../img/gulp_png_sprite.png';
$sprite-fb: (36px, 0px, -36px, 0px, 8px, 16px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-fb', );
$sprite-insta-name: 'sprite-insta';
$sprite-insta-x: 18px;
$sprite-insta-y: 0px;
$sprite-insta-offset-x: -18px;
$sprite-insta-offset-y: 0px;
$sprite-insta-width: 18px;
$sprite-insta-height: 18px;
$sprite-insta-total-width: 44px;
$sprite-insta-total-height: 40px;
$sprite-insta-image: '../img/gulp_png_sprite.png';
$sprite-insta: (18px, 0px, -18px, 0px, 18px, 18px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-insta', );
$sprite-p-name: 'sprite-p';
$sprite-p-x: 0px;
$sprite-p-y: 19px;
$sprite-p-offset-x: 0px;
$sprite-p-offset-y: -19px;
$sprite-p-width: 16px;
$sprite-p-height: 21px;
$sprite-p-total-width: 44px;
$sprite-p-total-height: 40px;
$sprite-p-image: '../img/gulp_png_sprite.png';
$sprite-p: (0px, 19px, 0px, -19px, 16px, 21px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-p', );
$sprite-tw-name: 'sprite-tw';
$sprite-tw-x: 18px;
$sprite-tw-y: 18px;
$sprite-tw-offset-x: -18px;
$sprite-tw-offset-y: -18px;
$sprite-tw-width: 17px;
$sprite-tw-height: 13px;
$sprite-tw-total-width: 44px;
$sprite-tw-total-height: 40px;
$sprite-tw-image: '../img/gulp_png_sprite.png';
$sprite-tw: (18px, 18px, -18px, -18px, 17px, 13px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-tw', );
$sprite-ytu-name: 'sprite-ytu';
$sprite-ytu-x: 0px;
$sprite-ytu-y: 0px;
$sprite-ytu-offset-x: 0px;
$sprite-ytu-offset-y: 0px;
$sprite-ytu-width: 18px;
$sprite-ytu-height: 19px;
$sprite-ytu-total-width: 44px;
$sprite-ytu-total-height: 40px;
$sprite-ytu-image: '../img/gulp_png_sprite.png';
$sprite-ytu: (0px, 0px, 0px, 0px, 18px, 19px, 44px, 40px, '../img/gulp_png_sprite.png', 'sprite-ytu', );
$spritesheet-width: 44px;
$spritesheet-height: 40px;
$spritesheet-image: '../img/gulp_png_sprite.png';
$spritesheet-sprites: ($sprite-blank, $sprite-fb, $sprite-insta, $sprite-p, $sprite-tw, $sprite-ytu, );
$spritesheet: (44px, 40px, '../img/gulp_png_sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
